name: multirole  Code Assistant act as team in product lifetime development

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  product-owner:
      if: |
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@plan')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@plan')) ||
        (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@plan')) ||
        (github.event_name == 'issues' && (contains(github.event.issue.body, '@plan') || contains(github.event.issue.title, '@plan')))
      runs-on: ubuntu-latest
      permissions:
        contents: read
        pull-requests: write
        issues: write
        id-token: write
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4
          with:
            fetch-depth: 1
  
        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version: '3.11'
  
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install requests
  
        - name: Get comment or issue body
          id: get_input
          run: |
            if [ "${{ github.event_name }}" == "issue_comment" ]; then
              echo "input_text=$(echo '${{ github.event.comment.body }}' | sed 's/@deepseek//g' | tr -d '\n')" >> $GITHUB_OUTPUT
              echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
              echo "comment_id=${{ github.event.comment.id }}" >> $GITHUB_OUTPUT
              echo "is_pr=${{ github.event.issue.pull_request != null }}" >> $GITHUB_OUTPUT
            elif [ "${{ github.event_name }}" == "pull_request_review_comment" ]; then
              echo "input_text=$(echo '${{ github.event.comment.body }}' | sed 's/@deepseek//g' | tr -d '\n')" >> $GITHUB_OUTPUT
              echo "issue_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
              echo "comment_id=${{ github.event.comment.id }}" >> $GITHUB_OUTPUT
              echo "is_pr=true" >> $GITHUB_OUTPUT
            elif [ "${{ github.event_name }}" == "pull_request_review" ]; then
              echo "input_text=$(echo '${{ github.event.review.body }}' | sed 's/@deepseek//g' | tr -d '\n')" >> $GITHUB_OUTPUT
              echo "issue_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
              echo "comment_id=" >> $GITHUB_OUTPUT
              echo "is_pr=true" >> $GITHUB_OUTPUT
            elif [ "${{ github.event_name }}" == "issues" ]; then
              echo "input_text=$(echo '${{ github.event.issue.title }} ${{ github.event.issue.body }}' | sed 's/@deepseek//g' | tr -d '\n')" >> $GITHUB_OUTPUT
              echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
              echo "comment_id=" >> $GITHUB_OUTPUT
              echo "is_pr=${{ github.event.issue.pull_request != null }}" >> $GITHUB_OUTPUT
            fi
  
        - name: Call DeepSeek API
          id: deepseek
          env:
            DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          run: |
            response=$(curl -s -X POST https://api.deepseek.com/chat/completions \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DEEPSEEK_API_KEY" \
              -d '{
                "model": "deepseek-r1",
                "messages": [
                  {"role": "system", "content": "You are a helpful AI assistant specializing in code and technical queries. Provide concise, accurate, and well-formatted responses in English."},
                  {"role": "user", "content": "${{ steps.get_input.outputs.input_text }}"}
                ],
                "temperature": 0.6,
                "max_tokens": 2048,
                "stream": false
              }')
            echo "deepseek_response=$(echo "$response" | jq -r '.choices[0].message.content' | tr -d '\n')" >> $GITHUB_OUTPUT
            echo "Response from DeepSeek: $response"
  
        - name: Post DeepSeek response as comment
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            issue_number=${{ steps.get_input.outputs.issue_number }}
            is_pr=${{ steps.get_input.outputs.is_pr }}
            comment_body=$(echo "${{ steps.deepseek.outputs.deepseek_response }}" | jq -s -R .)
            if [ "$is_pr" == "true" ]; then
              endpoint="repos/${{ github.repository }}/issues/${issue_number}/comments"
            else
              endpoint="repos/${{ github.repository }}/issues/${issue_number}/comments"
            fi
            curl -s -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/$endpoint \
              -d "{\"body\": $comment_body}"
  frontend-engineer-kimi:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@uiux')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@uiux')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@uiux')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@uiux')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Prepare Environment for Claude
        run: |
          curl -fsSL https://bun.sh/install | bash
          mkdir -p $HOME/.claude-code-router
          cat << 'EOF' > $HOME/.claude-code-router/config.json
          {
            "log": true,
            "OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}",
            "OPENAI_BASE_URL": "https://api.deepseek.com",
            "OPENAI_MODEL": "deepseek-chat"
          }
          EOF
        shell: bash

      - name: Start Claude Code Router
        run: |
          nohup ~/.bun/bin/bunx @musistudio/claude-code-router@1.0.8 start &
        shell: bash

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        env:
          ANTHROPIC_BASE_URL: http://localhost:3456
        with:
          anthropic_api_key: "${{ secrets.ANTHROPIC_API_KEY }}"              
  engineer-claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Prepare Environment for Claude
        run: |
          curl -fsSL https://bun.sh/install | bash
          mkdir -p $HOME/.claude-code-router
          cat << 'EOF' > $HOME/.claude-code-router/config.json
          {
            "log": true,
            "ANTHROPIC_API_KEY": "${{ secrets.kimi_API_KEY }}",
            "ANTHROPIC_BASE_URL": "https://api.moonshot.cn/anthropic/",
            "OPENAI_MODEL": "kimi-k2-0711-preview"
          }
          EOF
        shell: bash

      - name: Start Claude Code Router
        run: |
          nohup ~/.bun/bin/bunx @musistudio/claude-code-router@1.0.8 start &
        shell: bash

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        env:
          ANTHROPIC_BASE_URL: http://localhost:3456
        with:
          anthropic_api_key: "${{ secrets.ANTHROPIC_API_KEY }}"

  engineer-grok:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@grok')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@grok')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@grok')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@grok') || contains(github.event.issue.title, '@grok')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Prepare Environment for Grok
        run: |
          curl -fsSL https://bun.sh/install | bash
          mkdir -p $HOME/.grok-code-router
          cat << 'EOF' > $HOME/.grok-code-router/config.json
          {
            "log": true,
            "XAI_API_KEY": "${{ secrets.XAI_API_KEY }}",
            "XAI_BASE_URL": "https://api.x.ai",
            "XAI_MODEL": "grok-3"
          }
          EOF
        shell: bash

      - name: Start Grok Code Router
        run: |
          nohup ~/.bun/bin/bunx @musistudio/grok-code-router@1.0.8 start &
        shell: bash

      - name: Run Grok Code
        id: grok
        uses: xai/grok-code-action@beta
        env:
          XAI_BASE_URL: http://localhost:3456
        with:
          xai_api_key: "${{ secrets.XAI_API_KEY }}"

  engineer-deepseek:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@deepseek')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@deepseek')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@deepseek')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@deepseek') || contains(github.event.issue.title, '@deepseek')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Prepare Environment for DeepSeek
        run: |
          curl -fsSL https://bun.sh/install | bash
          mkdir -p $HOME/.deepseek-code-router
          cat << 'EOF' > $HOME/.deepseek-code-router/config.json
          {
            "log": true,
            "DEEPSEEK_API_KEY": "${{ secrets.DEEPSEEK_API_KEY }}",
            "DEEPSEEK_BASE_URL": "https://api.deepseek.com",
            "DEEPSEEK_MODEL": "deepseek-pro"
          }
          EOF
        shell: bash

      - name: Start DeepSeek Code Router
        run: |
          nohup ~/.bun/bin/bunx @musistudio/deepseek-code-router@1.0.8 start &
        shell: bash

      - name: Run DeepSeek Code
        id: deepseek
        uses: deepseek/deepseek-code-action@beta
        env:
          DEEPSEEK_BASE_URL: http://localhost:3456
        with:
          deepseek_api_key: "${{ secrets.DEEPSEEK_API_KEY }}"

  engineer-gemini:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@gemini')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@gemini')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@gemini')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@gemini') || contains(github.event.issue.title, '@gemini')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Prepare Environment for Gemini
        run: |
          curl -fsSL https://bun.sh/install | bash
          mkdir -p $HOME/.gemini-code-router
          cat << 'EOF' > $HOME/.gemini-code-router/config.json
          {
            "log": true,
            "GEMINI_API_KEY": "${{ secrets.GEMINI_API_KEY }}",
            "GEMINI_BASE_URL": "https://api.gemini.com",
            "GEMINI_MODEL": "gemini-pro"
          }
          EOF
        shell: bash

      - name: Start Gemini Code Router
        run: |
          nohup ~/.bun/bin/bunx @musistudio/gemini-code-router@1.0.8 start &
        shell: bash

      - name: Run Gemini Code
        id: gemini
        uses: google/gemini-code-action@beta
        env:
          GEMINI_BASE_URL: http://localhost:3456
        with:
          gemini_api_key: "${{ secrets.GEMINI_API_KEY }}"
